this is about the programming language, C.

C is a general-purpose, procedural computer programming language supporting structured programming, 
lexical variable scope, and recursion, with a static type system. 
By design, C provides constructs that map efficiently to typical machine instructions.

the history of C.

C is a general-purpose, procedural computer programming language supporting structured programming, 
lexical variable scope, and recursion, with a static type system. 
By design, C provides constructs that map efficiently to typical machine instructions

Early Implementations and Language Standard
The development of C was to become the basis for Unix. According to the Bell Labs paper, “By early 1973, 
the essentials of modern C were complete. 
The language and compiler were strong enough to permit us to rewrite the Unix kernel for the PDP-11 in C 
during the summer of the year.” This now meant that C was becoming a strong language that could, 
and would be, implemented across many systems. By the middle of the 1970s, 
the C-based Unix was used in many projects within the Bell System as well as “a small group of research-oriented in
dustrial, academic, and government organizations outside [Bell Labs]".
In 1978, Brian Kernighan and Dennis Ritchie published The C Programming Language, 
which would serve as the language reference until a formal standard was adopted. 
Five years later, the American National Standard Institute (ANSI) formed the committee, X3J11, 
to establish the formal standard of C. The C standard was ratified as ANSI X3.159-1989 “Programming Language C”. 
This was the first formal standard of C. Currently, we are on the fourth standard of C,
 known as C18 as it was published in June of 2018 JavaTpoint.Uses Today
According to Toptal, UNIX operating systems are written in C and most of Linux is also in C. Also databases such as Oracle Database, MySQL, MS SQL Server, and PostgresSQL are at least partially written in C. C is the basis of many system kernels. Other programming languages, like Python and Perl, use compilers or interpreters that are written in C.

C has changed over the years and is still a common language to use in lower level programs, like kernels. 
But it is also used for many applications ranging from device drivers to other programming languages’ compilers 
or interpreters. The language also made way for C++, Objective-C, C#, and many more C-based languages 
that each have their own speciality.


C basics

You have seen the basic structure of a C program, so it will be easy to understand other basic building blocks of the C programming language.

Tokens in C
A C program consists of various tokens and a token is either a keyword, an identifier, a constant, 
a string literal, or a symbol. For example, the following C statement consists of five tokens −

printf("Hello, World! \n");
The individual tokens are −

printf
(
   "Hello, World! \n"
)
;
-----------------------------------------------------

Semicolons
In a C program, the semicolon is a statement terminator. 
That is, each individual statement must be ended with a semicolon. 
It indicates the end of one logical entity.

Given below are two different statements −

printf("Hello, World! \n");
return 0;

-------------------------------------------------------------------

Comments
Comments are like helping text in your C program and they are ignored by the compiler. 
They start with /* and terminate with the characters */ as shown below −

/* my first program in C */
You cannot have comments within comments and they do not occur within a string or character literals.

--------------------------------------------------------------------------------------------------------------

Identifiers
A C identifier is a name used to identify a variable, function, or any other user-defined item.
 An identifier starts with a letter A to Z, a to z, or an underscore '_' followed by zero or more letters, 
underscores, and digits (0 to 9).

C does not allow punctuation characters such as @, $, and % within identifiers. 
C is a case-sensitive programming language. Thus, Manpower and manpower are two different identifiers in C. 
Here are some examples of acceptable identifiers −

mohd       zara    abc   move_name  a_123
myname50   _temp   j     a23b9      retVal

----------------------------------------------------------------------------------------------------------

Keywords
The following list shows the reserved words in C. 
These reserved words may not be used as constants or variables or any other identifier names.

auto	else	long	switch
break	enum	register	typedef
case	extern	return	union
char	float	short	unsigned
const	for	signed	void
continue	goto	sizeof	volatile
default	if	static	while
do	int	struct	_Packed
double	

-------------------------------------------------------------------------------------------------------

Whitespace in C
A line containing only whitespace, possibly with a comment, is known as a blank line, 
and a C compiler totally ignores it.

Whitespace is the term used in C to describe blanks, tabs, newline characters and comments. 
Whitespace separates one part of a statement from another and enables the compiler to identify 
where one element in a statement, such as int, ends and the next element begins. Therefore, 
in the following statement −

int age;
there must be at least one whitespace character (usually a space) between int and age for the compiler to be able 
to distinguish them. On the other hand, in the following statement −

fruit = apples + oranges;   // get the total fruit
no whitespace characters are necessary between fruit and =, or between = and apples, although 
you are free to include some if you wish to increase readability.

----------------------------------------------------------------------------------------------------------

Data types in c refer to an extensive system used for declaring variables or functions of different types.
 The type of a variable determines how much space it occupies in storage and how the bit pattern stored is 
interpreted.


The types in C can be classified as follows −

Sr.No.	Types & Description
1	
Basic Types

They are arithmetic types and are further classified into: (a) integer types and (b) floating-point types.

2	
Enumerated types

They are again arithmetic types and they are used to define variables that can only assign certain discrete 
integer values throughout the program.

3	
The type void
The type specifier void indicates that no value is available.

4	
Derived types

They include (a) Pointer types, (b) Array types, (c) Structure types, (d) Union types and (e) Function types.

-------------------------------------------------------------------------------------------------------------

Integer Types
The following table provides the details of standard integer types with their storage sizes and value ranges −

Type	Storage size	Value range
char	1 byte	-128 to 127 or 0 to 255
unsigned char	1 byte	0 to 255
signed char	1 byte	-128 to 127
int	2 or 4 bytes	-32,768 to 32,767 or -2,147,483,648 to 2,147,483,647
unsigned int	2 or 4 bytes	0 to 65,535 or 0 to 4,294,967,295
short	2 bytes	-32,768 to 32,767
unsigned short	2 bytes	0 to 65,535
long	8 bytes or (4bytes for 32 bit OS)	-9223372036854775808 to 9223372036854775807
unsigned long	8 bytes	0 to 18446744073709551615
To get the exact size of a type or a variable on a particular platform, you can use the sizeof operator. 
The expressions sizeof(type) yields the storage size of the object or type in bytes. Given below is an example to 
get the size of various type on a machine using different constant defined in limits.h header file −
EXAMPLE

"
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <float.h>

int main(int argc, char** argv) {

    printf("CHAR_BIT    :   %d\n", CHAR_BIT);
    printf("CHAR_MAX    :   %d\n", CHAR_MAX);
    printf("CHAR_MIN    :   %d\n", CHAR_MIN);
    printf("INT_MAX     :   %d\n", INT_MAX);
    printf("INT_MIN     :   %d\n", INT_MIN);
    printf("LONG_MAX    :   %ld\n", (long) LONG_MAX);
    printf("LONG_MIN    :   %ld\n", (long) LONG_MIN);
    printf("SCHAR_MAX   :   %d\n", SCHAR_MAX);
    printf("SCHAR_MIN   :   %d\n", SCHAR_MIN);
    printf("SHRT_MAX    :   %d\n", SHRT_MAX);
    printf("SHRT_MIN    :   %d\n", SHRT_MIN);
    printf("UCHAR_MAX   :   %d\n", UCHAR_MAX);
    printf("UINT_MAX    :   %u\n", (unsigned int) UINT_MAX);
    printf("ULONG_MAX   :   %lu\n", (unsigned long) ULONG_MAX);
    printf("USHRT_MAX   :   %d\n", (unsigned short) USHRT_MAX);

    return 0;
}
"

When you compile and execute the above program, it produces the following result on Linux −

CHAR_BIT    :   8
CHAR_MAX    :   127
CHAR_MIN    :   -128
INT_MAX     :   2147483647
INT_MIN     :   -2147483648
LONG_MAX    :   9223372036854775807
LONG_MIN    :   -9223372036854775808
SCHAR_MAX   :   127
SCHAR_MIN   :   -128
SHRT_MAX    :   32767
SHRT_MIN    :   -32768
UCHAR_MAX   :   255
UINT_MAX    :   4294967295
ULONG_MAX   :   18446744073709551615
USHRT_MAX   :   65535
-----------------------------------------------------------------------------------------------------------

Floating-Point Types
The following table provide the details of standard floating-point types with storage sizes and value ranges and 
their precision −

Type	Storage size	Value range	Precision
float	4 byte	1.2E-38 to 3.4E+38	6 decimal places
double	8 byte	2.3E-308 to 1.7E+308	15 decimal places
long double	10 byte	3.4E-4932 to 1.1E+4932	19 decimal places
The header file float.h defines macros that allow you to use these values and other details about the 
binary representation of real numbers in your programs. 
The following example prints the storage space taken by a float type and its range values −

EXMAPLE!!!!!

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <float.h>

int main(int argc, char** argv) {

    printf("Storage size for float : %d \n", sizeof(float));
    printf("FLT_MAX     :   %g\n", (float) FLT_MAX);
    printf("FLT_MIN     :   %g\n", (float) FLT_MIN);
    printf("-FLT_MAX    :   %g\n", (float) -FLT_MAX);
    printf("-FLT_MIN    :   %g\n", (float) -FLT_MIN);
    printf("DBL_MAX     :   %g\n", (double) DBL_MAX);
    printf("DBL_MIN     :   %g\n", (double) DBL_MIN);
    printf("-DBL_MAX     :  %g\n", (double) -DBL_MAX);
    printf("Precision value: %d\n", FLT_DIG );

    return 0;
}

When you compile and execute the above program, it produces the following result on Linux −

Storage size for float : 4 
FLT_MAX      :   3.40282e+38
FLT_MIN      :   1.17549e-38
-FLT_MAX     :   -3.40282e+38
-FLT_MIN     :   -1.17549e-38
DBL_MAX      :   1.79769e+308
DBL_MIN      :   2.22507e-308
-DBL_MAX     :  -1.79769e+308
Precision value: 6
----------------------------------------------------------------------------------------------------------

The void Type
The void type specifies that no value is available. It is used in three kinds of situations −

Sr.No.	Types & Description
1	
Function returns as void

There are various functions in C which do not return any value or you can say they return void.
 A function with no return value has the return type as void. For example, void exit (int status);

2	
Function arguments as void

There are various functions in C which do not accept any parameter. A function with no parameter can accept a void.
 For example, int rand(void);

3	
Pointers to void

A pointer of type void * represents the address of an object, but not its type. For example, 
a memory allocation function void *malloc( size_t size ); returns a pointer to void which can be casted to any 
data type.
---------------------------------------------------------------------------------------------------------------

A variable is nothing but a name given to a storage area that our programs can manipulate. 
Each variable in C has a specific type, which determines the size and layout of the variable's memory; 
the range of values that can be stored within that memory; and the set of operations that can be applied to the 
variable.

The name of a variable can be composed of letters, digits, and the underscore character. 
It must begin with either a letter or an underscore. 
Upper and lowercase letters are distinct because C is case-sensitive. 
Based on the basic types explained in the previous chapter, there will be the following basic variable types −

Sr.No.	Type & Description
1	
char

Typically a single octet(one byte). It is an integer type.

2	
int

The most natural size of integer for the machine.

3	
float

A single-precision floating point value.

4	
double

A double-precision floating point value.

5	
void

Represents the absence of type.

C programming language also allows to define various other types of variables,
 which we will cover in subsequent chapters like Enumeration, Pointer, Array, Structure, Union, etc. 
---------------------------------------------------------------------------------------------------------

Variable Definition in C
A variable definition tells the compiler where and how much storage to create for the variable.
 A variable definition specifies a data type and contains a list of one or more variables of that type as 
follows −

type variable_list;
Here, type must be a valid C data type including char, w_char, int, float, double, bool, or 
any user-defined object; and variable_list may consist of one or more identifier names separated by commas.
 Some valid declarations are shown here −

int    i, j, k;
char   c, ch;
float  f, salary;
double d;
The line int i, j, k; declares and defines the variables i, j, and k; which instruct the compiler to create 
variables named i, j and k of type int.


Variables can be initialized (assigned an initial value) in their declaration.
 The initializer consists of an equal sign followed by a constant expression as follows −

type variable_name = value;
Some examples are −

extern int d = 3, f = 5;    // declaration of d and f. 
int d = 3, f = 5;           // definition and initializing d and f. 
byte z = 22;                // definition and initializes z. 
char x = 'x';               // the variable x has the value 'x'.
For definition without an initializer: variables with static storage duration are 
implicitly initialized with NULL (all bytes have the value 0); the initial value of all other variables are 
undefined.

--------------------------------------------------------------------------------------------------------------

Variable Declaration in C
A variable declaration provides assurance to the compiler that there exists a variable with the given type and 
name so that the compiler can proceed for further compilation without requiring the complete detail about the 
variable. 
A variable definition has its meaning at the time of compilation only,
 the compiler needs actual variable definition at the time of linking the program.

A variable declaration is useful when you are using multiple files and you define your variable in one of the 
files which will be available at the time of linking of the program. 
You will use the keyword extern to declare a variable at any place.
 Though you can declare a variable multiple times in your C program,
 it can be defined only once in a file, a function, or a block of code.

Example
Try the following example, where variables have been declared at the top,
 but they have been defined and initialized inside the main function −

#include <stdio.h>

// Variable declaration:
extern int a, b;
extern int c;
extern float f;

int main () {

   /* variable definition: */
   int a, b;
   int c;
   float f;
 
   /* actual initialization */
   a = 10;
   b = 20;
  
   c = a + b;
   printf("value of c : %d \n", c);

   f = 70.0/3.0;
   printf("value of f : %f \n", f);
 
   return 0;
}
When the above code is compiled and executed, it produces the following result −

value of c : 30
value of f : 23.333334

The same concept applies on function declaration where you provide a function name at the time of its
 declaration and its actual definition can be given anywhere else. For example −

// function declaration
int func();

int main() {

   // function call
   int i = func();
}

// function definition
int func() {
   return 0;
-------------------------------------------------------------------------------------------------

Lvalues and Rvalues in C
There are two kinds of expressions in C −

lvalue − Expressions that refer to a memory location are called "lvalue" expressions. 
An lvalue may appear as either the left-hand or right-hand side of an assignment.

rvalue − The term rvalue refers to a data value that is stored at some address in memory.
 An rvalue is an expression that cannot have a value assigned to it which means an rvalue may appear 
on the right-hand side but not on the left-hand side of an assignment.

Variables are lvalues and so they may appear on the left-hand side of an assignment. 
Numeric literals are rvalues and so they may not be assigned and cannot appear on the left-hand side. 
Take a look at the following valid and invalid statements −

int g = 20; // valid statement

10 = 20; // invalid statement; would generate compile-time error
}